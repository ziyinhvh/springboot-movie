{"remainingRequest":"E:\\Spring\\springboot-movie\\vue-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\Spring\\springboot-movie\\vue-app\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\Spring\\springboot-movie\\vue-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Spring\\springboot-movie\\vue-app\\src\\views\\Seat.vue?vue&type=template&id=56d61282&scoped=true&","dependencies":[{"path":"E:\\Spring\\springboot-movie\\vue-app\\src\\views\\Seat.vue","mtime":1642510434000},{"path":"E:\\Spring\\springboot-movie\\vue-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Spring\\springboot-movie\\vue-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\Spring\\springboot-movie\\vue-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Spring\\springboot-movie\\vue-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}